<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" type="image/png" href="https://hydra.newpaltz.edu/SUNYCAT.png" />
  <title>Hydra Dashboard - SUNY New Paltz</title>
</head>

<body class="bg-gray-50 text-gray-900">
  <header class="bg-[#052049] text-white">
    <div class="max-w-5xl mx-auto px-4 py-4 relative flex items-center gap-3">
      <img src="https://hydra.newpaltz.edu/SUNYCAT.png" alt="Hydra" class="h-8 w-8 rounded" />
      <h1 class="text-xl font-semibold">SUNY New Paltz - Hydra</h1>
      <a href="https://github.com/lettucegoblin/hydra-saml-auth" target="_blank"
        class="absolute top-4 right-4 text-white">
        <i class="fab fa-github text-2xl"></i>
      </a>
    </div>
  </header>

  <main class="max-w-5xl mx-auto px-4 py-6">
    <div class="bg-white rounded shadow p-6">
      <div class="border-b pb-4 mb-4 flex items-start justify-between gap-4">
        <div>
          <h2 class="text-2xl font-semibold text-[#052049]">Welcome, <%= user.firstName %>
              <%= user.lastName %>
          </h2>
          <p class="mt-1"><span class="font-semibold">Email:</span>
            <%= user.email %>
          </p>
          <p><span class="font-semibold">Username:</span>
            <%= user.displayName %>
          </p>
        </div>
        <div class="shrink-0">
          <a href="/logout?returnTo=https://hydra.newpaltz.edu/dashboard"
            class="inline-flex items-center px-4 py-2 rounded bg-red-600 text-white hover:bg-red-700">Logout</a>
        </div>
      </div>

      <div class="mb-6">
        <h3 class="text-lg font-semibold">Authentication Status</h3>
        <p><span class="font-semibold">Status:</span> <span class="text-green-600 font-bold">Logged In</span></p>
      </div>


      <!-- Tabs -->
      <div>
        <div class="flex border-b mb-4" role="tablist">
          <button id="tab-minecraft" class="px-4 py-2 -mb-px border-b-2 border-[#052049] text-[#052049] font-medium"
            data-target="#panel-minecraft">Minecraft</button>
          <button id="tab-openwebui" class="px-4 py-2 text-gray-600 hover:text-gray-900"
            data-target="#panel-openwebui">OpenWebUI</button>
          <button id="tab-n8n" class="px-4 py-2 text-gray-600 hover:text-gray-900" data-target="#panel-n8n">n8n</button>
          <button id="tab-containers" class="px-4 py-2 text-gray-600 hover:text-gray-900"
            data-target="#panel-containers">Containers</button>
        </div>

        <section id="panel-minecraft">
          <h3 class="text-xl font-semibold mb-2">Minecraft Server</h3>
          <form id="minecraft-form" class="space-y-3 max-w-md">
            <div>
              <label for="minecraft-username" class="block text-sm font-medium">Minecraft Username</label>
              <input type="text" id="minecraft-username" name="minecraft-username"
                class="mt-1 block w-full rounded border border-gray-300 px-3 py-2" placeholder="e.g. Notch" />
              <p id="minecraft-help" class="text-xs text-gray-500 mt-2 hidden">Enter your Minecraft username (e.g. <span
                  class="font-mono">Notch</span>). This is <span class="font-bold">required</span> to join the server.
              </p>
            </div>
            <button type="submit"
              class="inline-flex items-center px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700">Save
              Username</button>
            <div id="minecraft-message" class="mt-3"></div>
          </form>
          <div class="mb-3">
            <label for="minecraft-server-url" class="block text-sm font-medium">Server Address (Copy to
              Minecraft)</label>
            <div class="flex items-center gap-2 mt-1">
              <input type="text" id="minecraft-server-url"
                class="block w-full rounded border border-gray-300 px-3 py-2 font-mono bg-gray-100"
                value="hydra.newpaltz.edu" readonly />
              <button type="button" id="copy-server-url"
                class="px-3 py-2 rounded bg-blue-600 text-white hover:bg-blue-700" title="Copy">Copy</button>
            </div>
            <p class="text-xs text-gray-500 mt-2">Paste this address into Minecraft to join the server.</p>
          </div>
          <p class="text-gray-700 mb-2">More Minecraft configuration at the <a
              href="https://hydra.newpaltz.edu/minecraftdashboard/" target="_blank"
              class="text-blue-600 underline">configuration panel</a>.</p>

        </section>

        <section id="panel-openwebui" class="hidden">
          <h3 class="text-xl font-semibold mb-2">OpenWebUI Account Management</h3>
          <p class="text-gray-700 mb-2">Welcome to the OpenWebUI account management portal. OpenWebUI provides a
            comprehensive interface for accessing AI models and managing your preferences in a secure environment.</p>
          <p class="text-gray-700 mb-4">Our institution hosts an OpenWebUI instance at <a
              href="https://gpt.hydra.newpaltz.edu" target="_blank"
              class="text-blue-600 underline">https://gpt.hydra.newpaltz.edu</a>. To utilize these services, you'll need
            to establish credentials through this portal.</p>

          <div id="webui-status-loading" class="text-gray-600">Checking your OpenWebUI account status...</div>

          <div id="webui-create-account" class="hidden">
            <p class="mb-2">You don't have an OpenWebUI account yet.</p>
            <form id="create-account-form" class="space-y-3">
              <div>
                <label for="new-password" class="block text-sm font-medium">Set Password</label>
                <input type="password" id="new-password" name="password" required
                  class="mt-1 block w-full rounded border border-gray-300 px-3 py-2">
              </div>
              <div>
                <label for="confirm-password" class="block text-sm font-medium">Confirm Password</label>
                <input type="password" id="confirm-password" name="confirm-password" required
                  class="mt-1 block w-full rounded border border-gray-300 px-3 py-2">
              </div>
              <button type="submit"
                class="inline-flex items-center px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700">Create
                OpenWebUI Account</button>
            </form>
            <div id="create-account-message" class="mt-3"></div>
          </div>

          <div id="webui-account-exists" class="hidden">
            <p class="mb-2">You have an existing OpenWebUI account.</p>
            <p><span class="font-semibold">Username:</span> <span id="webui-username"></span></p>
            <p><span class="font-semibold">Role:</span> <span id="webui-role"></span></p>

            <div id="change-password-section" class="mt-4">
              <h4 class="font-semibold mb-2">Change Password</h4>
              <form id="change-password-form" class="space-y-3">
                <div>
                  <label for="new-password-change" class="block text-sm font-medium">New Password</label>
                  <input type="password" id="new-password-change" name="new-password" required
                    class="mt-1 block w-full rounded border border-gray-300 px-3 py-2">
                </div>
                <div>
                  <label for="confirm-password-change" class="block text-sm font-medium">Confirm New Password</label>
                  <input type="password" id="confirm-password-change" name="confirm-password" required
                    class="mt-1 block w-full rounded border border-gray-300 px-3 py-2">
                </div>
                <button type="submit"
                  class="inline-flex items-center px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700">Update
                  Password</button>
              </form>
              <div id="change-password-message" class="mt-3"></div>
            </div>
          </div>
        </section>

        <section id="panel-n8n" class="hidden">
          <h3 class="text-xl font-semibold mb-2">n8n Account Management</h3>
          <p class="text-gray-700 mb-4">Manage your n8n automation account.</p>

          <div id="n8n-status-loading" class="text-gray-600">Checking your n8n account status...</div>
          <div id="n8n-account-exists" class="hidden">
            <p><span class="font-semibold">Status:</span> Found</p>
            <p><span class="font-semibold">Role:</span> <span id="n8n-role"></span></p>
            <p class="mt-2">You can log in to n8n at <a href="https://n8n.hydra.newpaltz.edu" target="_blank"
                class="text-blue-600 underline">https://n8n.hydra.newpaltz.edu</a></p>

            <div class="mt-4 border-t pt-4">
              <h4 class="font-semibold mb-2">Change n8n Password</h4>
              <form id="n8n-change-password-form" class="space-y-3">
                <div>
                  <label for="n8n-new-password" class="block text-sm font-medium">New Password</label>
                  <input type="password" id="n8n-new-password" name="new-password" required minlength="8"
                    class="mt-1 block w-full rounded border border-gray-300 px-3 py-2">
                  <p class="text-sm text-gray-500 mt-1">Must be at least 8 characters</p>
                </div>
                <div>
                  <label for="n8n-confirm-password" class="block text-sm font-medium">Confirm New Password</label>
                  <input type="password" id="n8n-confirm-password" name="confirm-password" required minlength="8"
                    class="mt-1 block w-full rounded border border-gray-300 px-3 py-2">
                </div>
                <button type="submit"
                  class="inline-flex items-center px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700">Update
                  n8n Password</button>
              </form>
              <div id="n8n-change-password-message" class="mt-3"></div>
            </div>
          </div>
          <div id="n8n-create-account" class="hidden">
            <p>No n8n account found. You can request an invite:</p>
            <form id="n8n-create-form" class="mt-3">
              <button type="submit"
                class="inline-flex items-center px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700">Request
                n8n Invite</button>
            </form>
            <div id="n8n-create-message" class="mt-3"></div>
          </div>
          <div id="n8n-invite" class="hidden mt-3">
            <p>Invite created. Use this link to complete setup:</p>
            <p><a id="n8n-invite-link" href="#" class="text-blue-600 underline" target="_blank"></a></p>
          </div>
        </section>
      </div>

      <section id="panel-containers" class="hidden">
        <h3 class="text-xl font-semibold mb-4">Container Projects</h3>

        <!-- Sub-tabs for Containers -->
        <div class="flex border-b mb-4" role="tablist">
          <button id="subtab-presets" class="px-4 py-2 text-sm font-medium border-b-2 border-[#052049] text-[#052049]"
            role="tab">Presets</button>
          <button id="subtab-github" class="px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-900"
            role="tab">From GitHub</button>
          <button id="subtab-my-containers" class="px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-900"
            role="tab">My Containers</button>
        </div>

        <!-- Presets Panel -->
        <div id="subpanel-presets">
          <p class="text-gray-700 mb-4">Choose a preset to quickly launch a container with pre-configured settings.</p>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <!-- Jupyter Preset -->
            <div class="border rounded p-4 hover:shadow-md transition">
              <h4 class="font-semibold text-lg mb-2"><i class="fas fa-book"></i> Jupyter Notebook</h4>
              <p class="text-sm text-gray-600 mb-3">Interactive Python notebook environment with persistent storage.</p>
              <p class="text-xs text-gray-500 mb-2"><strong>Port:</strong> 8888 | <strong>Resources:</strong> 512MB RAM,
                1 CPU</p>
              <input type="text" id="preset-jupyter-name" placeholder="Project name"
                class="w-full rounded border border-gray-300 px-3 py-2 text-sm mb-2" />
              <button onclick="startPreset('jupyter')"
                class="w-full px-4 py-2 rounded bg-purple-600 text-white hover:bg-purple-700 text-sm">Launch
                Jupyter</button>
            </div>

            <!-- Static Site Preset -->
            <div class="border rounded p-4 hover:shadow-md transition">
              <h4 class="font-semibold text-lg mb-2"><i class="fas fa-globe"></i> Static Website</h4>
              <p class="text-sm text-gray-600 mb-3">Nginx server for hosting static HTML/CSS/JS files.</p>
              <p class="text-xs text-gray-500 mb-2"><strong>Port:</strong> 80 | <strong>Resources:</strong> 256MB RAM,
                0.5 CPU</p>
              <input type="text" id="preset-static-name" placeholder="Project name"
                class="w-full rounded border border-gray-300 px-3 py-2 text-sm mb-2" />
              <button onclick="startPreset('static')"
                class="w-full px-4 py-2 rounded bg-green-600 text-white hover:bg-green-700 text-sm">Launch Static
                Site</button>
            </div>
          </div>
          <div id="preset-message" class="mt-3"></div>
        </div>

        <!-- GitHub Panel -->
        <div id="subpanel-github" class="hidden">
          <p class="text-gray-700 mb-4">Clone and run a GitHub repository with automatic dependency installation.</p>
          <form id="github-start-form" class="space-y-3 max-w-2xl">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label class="block text-sm font-medium" for="github-project-name">Project Name *</label>
                <input id="github-project-name"
                  class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm" placeholder="my-app"
                  required />
              </div>
              <div>
                <label class="block text-sm font-medium" for="github-runtime">Runtime *</label>
                <select id="github-runtime" class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                  required>
                  <option value="">Select runtime...</option>
                  <option value="node">Node.js (npm)</option>
                  <option value="python">Python (pip)</option>
                  <option value="static">Static (nginx)</option>
                </select>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium" for="github-url">Repository URL *</label>
              <input id="github-url" class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                placeholder="https://github.com/user/repo.git" required />
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label class="block text-sm font-medium" for="github-branch">Branch (optional)</label>
                <input id="github-branch" class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                  placeholder="main" />
              </div>
              <div>
                <label class="block text-sm font-medium" for="github-subdir">Subdirectory (optional)</label>
                <input id="github-subdir" class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                  placeholder="app" />
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium" for="github-start-cmd">Start Command (optional)</label>
              <input id="github-start-cmd" class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm"
                placeholder="npm start, python app.py, etc." />
              <p class="text-xs text-gray-500 mt-1">Leave blank for default (npm start / uvicorn / nginx)</p>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label class="block text-sm font-medium" for="github-port">Internal Port (optional)</label>
                <input id="github-port" type="number"
                  class="mt-1 block w-full rounded border border-gray-300 px-3 py-2 text-sm" placeholder="3000" />
              </div>
            </div>
            <button type="submit"
              class="inline-flex items-center px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">Clone &
              Launch</button>
          </form>
          <div id="github-message" class="mt-3"></div>
        </div>

        <!-- My Containers Panel -->
        <div id="subpanel-my-containers" class="hidden">
          <!-- VS Code Status Section -->
          <div id="vscode-status-section" class="mb-6 border rounded p-4 bg-blue-50">
            <div class="flex items-center justify-between mb-2">
              <h4 class="text-lg font-semibold"><i class="fas fa-code"></i> VS Code</h4>
              <button id="stop-vscode-btn" onclick="stopVSCode()"
                class="px-3 py-2 rounded bg-red-100 hover:bg-red-200 border border-red-300 text-red-700 text-sm hidden">
                <i class="fas fa-stop"></i> Stop VS Code
              </button>
            </div>
            <div id="vscode-not-running" class="text-gray-600 text-sm">
              <p>No VS Code instance running. Click "VS Code" next to any container to start.</p>
            </div>
            <div id="vscode-running" class="hidden">
              <p class="text-sm mb-2"><span class="font-semibold">Mounted Project:</span> <span
                  id="vscode-mounted-project" class="font-mono"></span></p>
              <!-- Password removed; using ForwardAuth -->
              <a id="vscode-url" href="#" target="_blank"
                class="inline-block mt-2 px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 text-sm">
                <i class="fas fa-external-link-alt"></i> Open VS Code
              </a>
            </div>
          </div>

          <div class="flex items-center justify-between mb-4">
            <h4 class="text-lg font-semibold">Your Running Containers</h4>
            <button id="refresh-containers" class="px-3 py-2 rounded bg-gray-100 hover:bg-gray-200 border text-sm">
              <i class="fas fa-sync-alt"></i> Refresh
            </button>
          </div>
          <div id="containers-list" class="space-y-2 text-sm"></div>
        </div>
      </section>

    </div>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const email = "<%= user.email %>";
      const name = "<%= user.firstName %> <%= user.lastName %>";
      const oid = "<%= user.oid %>";

      // Check if user exists in OpenWebUI
      checkUserExists(email, name);

      // Setup form handlers
      document.getElementById('create-account-form').addEventListener('submit', function (e) {
        e.preventDefault();
        createAccount(email, name);
      });

      document.getElementById('change-password-form').addEventListener('submit', function (e) {
        e.preventDefault();
        changePassword(email);
      });

      // Tabs
      const tabs = [
        { btn: 'tab-minecraft', panel: 'panel-minecraft' },
        { btn: 'tab-openwebui', panel: 'panel-openwebui' },
        { btn: 'tab-n8n', panel: 'panel-n8n' },
        { btn: 'tab-containers', panel: 'panel-containers' }
      ];
      tabs.forEach(t => {
        document.getElementById(t.btn).addEventListener('click', () => {
          tabs.forEach(x => {
            document.getElementById(x.btn).classList.remove('border-b-2', 'border-[#052049]', 'text-[#052049]');
            document.getElementById(x.btn).classList.add('text-gray-600');
            document.getElementById(x.panel).classList.add('hidden');
          });
          document.getElementById(t.btn).classList.add('border-b-2', 'border-[#052049]', 'text-[#052049]');
          document.getElementById(t.btn).classList.remove('text-gray-600');
          document.getElementById(t.panel).classList.remove('hidden');
        });
      });

      // Minecraft username fetch/save
      async function api(url, opts = {}) {
        const res = await fetch(url, opts);
        if (!res.ok) throw new Error(await res.text());
        return await res.json();
      }
      async function loadMinecraftUsername() {
        try {
          const res = await fetch('/minecraftdashboard/api/my-username');
          if (res.status === 401) {
            window.location.href = '/logout?returnTo=https://hydra.newpaltz.edu/dashboard';
            return;
          }
          if (!res.ok) throw new Error(await res.text());
          const { minecraft_username } = await res.json();
          const input = document.getElementById('minecraft-username');
          input.value = minecraft_username || '';
          document.getElementById('minecraft-help').classList.toggle('hidden', !!minecraft_username);
        } catch {
          document.getElementById('minecraft-help').classList.remove('hidden');
        }
      }
      document.getElementById('minecraft-form').addEventListener('submit', async function (e) {
        e.preventDefault();
        const input = document.getElementById('minecraft-username');
        const username = input.value.trim();
        const msg = document.getElementById('minecraft-message');
        if (!username) {
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Please enter a Minecraft username.</p>';
          document.getElementById('minecraft-help').classList.remove('hidden');
          return;
        }
        try {
          await api('/minecraftdashboard/api/my-username', { method: 'POST', body: JSON.stringify({ minecraft_username: username }), headers: { 'Content-Type': 'application/json' } });
          msg.innerHTML = '<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Username saved!</p>';
          document.getElementById('minecraft-help').classList.add('hidden');
        } catch (err) {
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Failed to save username.</p>';
        }
      });
      loadMinecraftUsername();

      // Copy Minecraft server URL to clipboard
      document.getElementById('copy-server-url').addEventListener('click', function () {
        const input = document.getElementById('minecraft-server-url');
        input.select();
        input.setSelectionRange(0, 99999); // For mobile
        document.execCommand('copy');
        this.textContent = 'Copied!';
        setTimeout(() => { this.textContent = 'Copy'; }, 1500);
      });

      // n8n: status + create flow
      checkN8nStatus();
      document.getElementById('n8n-create-form').addEventListener('submit', function (e) {
        e.preventDefault();
        createN8nAccount();
      });
      document.getElementById('n8n-change-password-form').addEventListener('submit', function (e) {
        e.preventDefault();
        changeN8nPassword();
      });

      // Container sub-tabs
      const containerSubtabs = [
        { btn: 'subtab-presets', panel: 'subpanel-presets' },
        { btn: 'subtab-github', panel: 'subpanel-github' },
        { btn: 'subtab-my-containers', panel: 'subpanel-my-containers' }
      ];
      containerSubtabs.forEach(t => {
        document.getElementById(t.btn).addEventListener('click', () => {
          containerSubtabs.forEach(x => {
            document.getElementById(x.btn).classList.remove('border-b-2', 'border-[#052049]', 'text-[#052049]');
            document.getElementById(x.btn).classList.add('text-gray-600');
            document.getElementById(x.panel).classList.add('hidden');
          });
          document.getElementById(t.btn).classList.add('border-b-2', 'border-[#052049]', 'text-[#052049]');
          document.getElementById(t.btn).classList.remove('text-gray-600');
          document.getElementById(t.panel).classList.remove('hidden');

          // Auto-load containers when switching to My Containers
          if (t.btn === 'subtab-my-containers') {
            loadMyContainers();
          }
        });
      });

      // Start preset container
      window.startPreset = async function (preset) {
        const msg = document.getElementById('preset-message');
        msg.textContent = '';
        const project = document.getElementById(`preset-${preset}-name`).value.trim().toLowerCase();
        if (!project || !/^[a-z0-9-]{1,40}$/.test(project)) {
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Enter a valid project name (lowercase, digits, dashes only).</p>';
          return;
        }
        try {
          msg.innerHTML = '<p class="text-gray-600">Starting container...</p>';
          const res = await fetch('/dashboard/api/containers/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ project, preset })
          });
          const data = await res.json();
          if (!res.ok || !data.success) throw new Error(data.message || 'Failed');

          let extra = '';
          if (data.jupyterToken) {
            extra = `<br><strong>Token:</strong> <code class="bg-gray-100 px-2 py-1 rounded text-xs">${data.jupyterToken}</code> <button onclick="navigator.clipboard.writeText('${data.jupyterToken}')" class="text-xs text-blue-600 underline">Copy</button>`;
          }
          msg.innerHTML = `<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Started! <a href="${data.url}" target="_blank" class="underline text-blue-600">${data.url}</a>${extra}</p>`;
          document.getElementById(`preset-${preset}-name`).value = '';
        } catch (err) {
          msg.innerHTML = `<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">${err.message || 'Failed to start container'}</p>`;
        }
      };

      // GitHub form handler
      document.getElementById('github-start-form').addEventListener('submit', async function (e) {
        e.preventDefault();
        const msg = document.getElementById('github-message');
        msg.textContent = '';
        const project = document.getElementById('github-project-name').value.trim().toLowerCase();
        const runtime = document.getElementById('github-runtime').value.trim();
        const url = document.getElementById('github-url').value.trim();
        const branch = document.getElementById('github-branch').value.trim();
        const subdir = document.getElementById('github-subdir').value.trim();
        const startCmd = document.getElementById('github-start-cmd').value.trim();
        const internalPort = document.getElementById('github-port').value.trim();

        if (!project || !/^[a-z0-9-]{1,40}$/.test(project)) {
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Enter a valid project name.</p>';
          return;
        }
        if (!runtime) {
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Select a runtime.</p>';
          return;
        }
        if (!url) {
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Enter a repository URL.</p>';
          return;
        }

        try {
          msg.innerHTML = '<p class="text-gray-600">Cloning repository and starting container...</p>';
          const body = { project, preset: 'repo', runtime, repo: { url } };
          if (branch) body.repo.branch = branch;
          if (subdir) body.repo.subdir = subdir;
          if (startCmd) body.repo.startCmd = startCmd;
          if (internalPort) body.internalPort = Number(internalPort);

          const res = await fetch('/dashboard/api/containers/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
          });
          const data = await res.json();
          if (!res.ok || !data.success) throw new Error(data.message || 'Failed');
          msg.innerHTML = `<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Started! <a href="${data.url}" target="_blank" class="underline text-blue-600">${data.url}</a></p>`;
          document.getElementById('github-start-form').reset();
        } catch (err) {
          msg.innerHTML = `<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">${err.message || 'Failed to start container'}</p>`;
        }
      });

      async function loadMyContainers() {
        const listEl = document.getElementById('containers-list');
        listEl.innerHTML = '<p class="text-gray-500">Loading…</p>';
        try {
          const res = await fetch('/dashboard/api/containers/mine');
          const data = await res.json();
          if (!res.ok || !data.success) throw new Error(data.message || 'Failed');

          // Update VS Code status
          updateVSCodeStatus(data.vscode);

          if (!data.containers.length) {
            listEl.innerHTML = '<p class="text-gray-500">No containers yet. Start one from the Presets or GitHub tabs.</p>';
            return;
          }
          listEl.innerHTML = '';
          data.containers.forEach(c => {
            const row = document.createElement('div');
            row.className = 'border rounded p-3 bg-gray-50';

            const stateColor = c.state === 'running' ? 'text-green-600' : 'text-gray-500';

            // Build repo info display if this is a repo container
            let repoInfo = '';
            if (c.repoUrl) {
              const repoMatch = c.repoUrl.match(/github\.com\/([^\/]+\/[^\/\.]+)/);
              const repoSlug = repoMatch ? repoMatch[1] : null;
              const commitShort = c.repoCommit ? c.repoCommit.substring(0, 7) : 'unknown';
              const commitLink = repoSlug && c.repoCommit
                ? `https://github.com/${repoSlug}/commit/${c.repoCommit}`
                : c.repoUrl;

              repoInfo = `
                <div class="text-xs text-gray-600 mt-1">
                  <i class="fab fa-github"></i> 
                  <a href="${c.repoUrl}" target="_blank" class="underline">${repoSlug || c.repoUrl}</a>
                  @ <a href="${commitLink}" target="_blank" class="font-mono underline">${commitShort}</a>
                </div>
              `;
            }

            row.innerHTML = `
              <div class="flex items-start justify-between mb-2">
                <div class="flex-1">
                  <div class="font-mono font-semibold text-sm">${c.name}</div>
                  <div class="text-xs text-gray-600">${c.image}</div>
                  <div class="text-xs ${stateColor}"><i class="fas fa-circle" style="font-size:6px;"></i> ${c.state} — ${c.status}</div>
                  ${c.url ? `<div class="mt-1"><a class="text-xs underline text-blue-600" target="_blank" href="${c.url}"><i class="fas fa-external-link-alt"></i> ${c.url}</a></div>` : ''}
                  ${repoInfo}
                </div>
              </div>
              <div class="flex gap-2 flex-wrap">
                <button onclick="openVSCode('${c.project}')" class="px-2 py-1 text-xs rounded bg-indigo-100 hover:bg-indigo-200 border border-indigo-300 text-indigo-700">
                  <i class="fas fa-code"></i> VS Code
                </button>
                ${c.jupyterToken ? `<button onclick="showToken('${c.jupyterToken}')" class="px-2 py-1 text-xs rounded bg-purple-100 hover:bg-purple-200 border border-purple-300 text-purple-700">
                  <i class="fas fa-key"></i> Show Token
                </button>` : ''}
                ${c.repoUrl ? `<button onclick="gitPull('${c.name}')" class="px-2 py-1 text-xs rounded bg-green-100 hover:bg-green-200 border border-green-300 text-green-700">
                  <i class="fas fa-sync-alt"></i> Pull Latest
                </button>` : ''}
                <button onclick="openLogs('${c.name}')" class="px-2 py-1 text-xs rounded bg-gray-200 hover:bg-gray-300 border">
                  <i class="fas fa-file-alt"></i> Logs
                </button>
                <button onclick="openTerminal('${c.name}')" class="px-2 py-1 text-xs rounded bg-blue-100 hover:bg-blue-200 border border-blue-300 text-blue-700">
                  <i class="fas fa-terminal"></i> Terminal
                </button>
                <button onclick="restartContainer('${c.name}')" class="px-2 py-1 text-xs rounded bg-yellow-100 hover:bg-yellow-200 border border-yellow-300 text-yellow-700">
                  <i class="fas fa-redo"></i> Restart
                </button>
                <button onclick="deleteContainer('${c.name}')" class="px-2 py-1 text-xs rounded bg-red-600 hover:bg-red-700 text-white">
                  <i class="fas fa-trash"></i> Delete
                </button>
              </div>
            `;
            listEl.appendChild(row);
          });
        } catch (err) {
          listEl.innerHTML = `<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">${err.message || 'Failed to load containers'}</p>`;
        }
      }

      window.deleteContainer = async function (name) {
        if (!confirm('Delete this container? This will remove the container and its data.')) return;
        try {
          const res = await fetch(`/dashboard/api/containers/${encodeURIComponent(name)}`, { method: 'DELETE' });
          const data = await res.json();
          if (!res.ok || !data.success) throw new Error(data.message || 'Failed');
          loadMyContainers();
        } catch (err) {
          alert('Failed to delete: ' + err.message);
        }
      };

      window.restartContainer = async function (name) {
        try {
          const res = await fetch(`/dashboard/api/containers/${encodeURIComponent(name)}/restart`, { method: 'POST' });
          const data = await res.json();
          if (!res.ok || !data.success) throw new Error(data.message || 'Failed');
          alert('Container restarted successfully!');
          loadMyContainers();
        } catch (err) {
          alert('Failed to restart: ' + err.message);
        }
      };

      window.gitPull = async function (name) {
        if (!confirm('Pull latest changes from the repository? This will update the code and restart the container.')) return;
        try {
          const res = await fetch(`/dashboard/api/containers/${encodeURIComponent(name)}/git-pull`, { method: 'POST' });
          const data = await res.json();
          if (!res.ok || !data.success) throw new Error(data.message || 'Failed');
          const msg = data.commitHash
            ? `Successfully updated to commit ${data.commitHash.substring(0, 7)}!`
            : 'Successfully pulled latest changes!';
          alert(msg);
          loadMyContainers();
        } catch (err) {
          alert('Failed to pull latest changes: ' + err.message);
        }
      };

      window.openLogs = function (name) {
        const w = window.open('', '_blank', 'width=900,height=600');
        w.document.write('<!DOCTYPE html><html><head><title>Logs: ' + name + '</title>');
        w.document.write('<style>body { margin: 0; padding: 0; background: #1a1a1a; font-family: monospace; }');
        w.document.write('#log { white-space: pre-wrap; margin: 0; padding: 12px; color: #ddd; height: 100vh; overflow: auto; font-size: 12px; line-height: 1.4; }</style></head>');
        w.document.write('<body><pre id="log"></pre>');
        w.document.write('<sc' + 'ript>');
        w.document.write('const es = new EventSource("/dashboard/api/containers/' + encodeURIComponent(name) + '/logs/stream");');
        w.document.write('const pre = document.getElementById("log");');
        w.document.write('es.onmessage = (e) => { pre.textContent += e.data + "\\n"; pre.scrollTop = pre.scrollHeight; };');
        w.document.write('es.onerror = () => { pre.textContent += "\\n[Stream closed]\\n"; es.close(); };');
        w.document.write('window.addEventListener("beforeunload", () => es.close());');
        w.document.write('</sc' + 'ript></body></html>');
      };

      window.showToken = function (token) {
        const msg = `Jupyter Token: ${token}`;
        if (navigator.clipboard) {
          navigator.clipboard.writeText(token).then(() => {
            alert(msg + '\n\n✓ Copied to clipboard!');
          }).catch(() => {
            alert(msg);
          });
        } else {
          prompt('Jupyter Token (Ctrl+C to copy):', token);
        }
      };

      // VS Code management functions
      window.openVSCode = async function (project) {
        if (!confirm(`Start VS Code for project "${project}"?\n\nThis will stop any currently running VS Code instance and mount this project.`)) return;

        const msg = document.createElement('div');
        msg.className = 'fixed top-4 right-4 bg-blue-100 border border-blue-300 rounded p-3 text-sm z-50';
        msg.textContent = 'Starting VS Code...';
        document.body.appendChild(msg);

        try {
          const res = await fetch('/dashboard/api/containers/start-vscode', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ project })
          });
          const data = await res.json();

          if (!res.ok || !data.success) throw new Error(data.message || 'Failed to start VS Code');

          msg.className = 'fixed top-4 right-4 bg-green-100 border border-green-300 rounded p-3 text-sm z-50';
          msg.textContent = 'VS Code started!';
          setTimeout(() => msg.remove(), 5000);

          // Reload container list to update status
          loadMyContainers();

          // Open VS Code in new tab after a short delay
          setTimeout(() => {
            window.open(data.url, '_blank');
          }, 1000);
        } catch (err) {
          msg.className = 'fixed top-4 right-4 bg-red-100 border border-red-300 rounded p-3 text-sm z-50';
          msg.textContent = 'Error: ' + err.message;
          setTimeout(() => msg.remove(), 5000);
        }
      };

      window.stopVSCode = async function () {
        if (!confirm('Stop the VS Code instance?')) return;

        try {
          const res = await fetch('/dashboard/api/containers/stop-vscode', { method: 'DELETE' });
          const data = await res.json();

          if (!res.ok || !data.success) throw new Error(data.message || 'Failed to stop VS Code');

          loadMyContainers();
        } catch (err) {
          alert('Error stopping VS Code: ' + err.message);
        }
      };

      // copyVSCodePassword removed; ForwardAuth in effect

      function updateVSCodeStatus(vscodeInfo) {
        const notRunning = document.getElementById('vscode-not-running');
        const running = document.getElementById('vscode-running');
        const stopBtn = document.getElementById('stop-vscode-btn');

        if (vscodeInfo && vscodeInfo.state === 'running') {
          notRunning.classList.add('hidden');
          running.classList.remove('hidden');
          stopBtn.classList.remove('hidden');

          document.getElementById('vscode-mounted-project').textContent = vscodeInfo.mountedProject || 'Unknown';
          document.getElementById('vscode-url').href = vscodeInfo.url || '#';
        } else {
          notRunning.classList.remove('hidden');
          running.classList.add('hidden');
          stopBtn.classList.add('hidden');
        }
      }

      window.openTerminal = function (name) {
        const w = window.open('', '_blank', 'width=1000,height=700');
        const doc = w.document;

        doc.open();
        doc.write('<!DOCTYPE html><html><head><title>Terminal: ' + name + '</title></head><body></body></html>');
        doc.close();

        // Add stylesheet
        const link = doc.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.css';
        doc.head.appendChild(link);

        // Add styles
        const style = doc.createElement('style');
        style.textContent = 'body { margin: 0; padding: 0; background: #000; } #terminal { height: 100vh; padding: 8px; }';
        doc.head.appendChild(style);

        // Add terminal div
        const terminalDiv = doc.createElement('div');
        terminalDiv.id = 'terminal';
        doc.body.appendChild(terminalDiv);

        // Load xterm.js and initialize
        const script = doc.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.js';
        script.onload = function () {
          const term = new w.Terminal({
            convertEol: true,
            fontFamily: "monospace",
            fontSize: 14,
            cursorBlink: true,
            theme: { background: "#000000", foreground: "#ffffff" }
          });
          term.open(doc.getElementById("terminal"));
          term.writeln("Connecting to container...");

          const proto = location.protocol === "https:" ? "wss" : "ws";
          const ws = new WebSocket(proto + "://" + location.host + "/dashboard/ws/containers/" + encodeURIComponent(name) + "/exec");
          ws.binaryType = "arraybuffer";
          ws.onopen = function () { term.clear(); term.writeln("Connected! Type commands below:"); term.write("$ "); };
          ws.onmessage = function (ev) { term.write(new Uint8Array(ev.data)); };
          ws.onclose = function () { term.writeln("\r\n[Connection closed]"); };
          ws.onerror = function () { term.writeln("\r\n[Connection error]"); };
          term.onData(function (data) { if (ws.readyState === WebSocket.OPEN) ws.send(data); });
        };
        doc.head.appendChild(script);
      };

      document.getElementById('refresh-containers').addEventListener('click', loadMyContainers);
      // Auto-load on tab switch handled in subtab click handler
    });

    // Function to check if user exists in OpenWebUI
    function checkUserExists(email, name) {
      // This would be an AJAX call to your backend
      fetch('/dashboard/api/webui/check-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email: email })
      })
        .then(response => response.json())
        .then(data => {
          document.getElementById('webui-status-loading').classList.add('hidden');

          if (data.exists) {
            // Show account exists section
            document.getElementById('webui-account-exists').classList.remove('hidden');
            document.getElementById('webui-username').textContent = data.username;
            document.getElementById('webui-role').textContent = data.role;
          } else {
            // Show create account section
            document.getElementById('webui-create-account').classList.remove('hidden');
          }
        })
        .catch(error => {
          console.error('Error checking user:', error);
          document.getElementById('webui-status-loading').innerHTML =
            '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error checking account status. Please try again later.</p>';
        });
    }

    // n8n helpers
    function checkN8nStatus() {
      fetch('/dashboard/api/n8n/status', { method: 'POST' })
        .then(res => res.json())
        .then(data => {
          document.getElementById('n8n-status-loading').classList.add('hidden');
          if (data.exists === false) {
            // User doesn't exist - show create account section
            document.getElementById('n8n-create-account').classList.remove('hidden');
          } else if (data.id && data.isPending) {
            // User exists but is pending - show they need to complete setup
            document.getElementById('n8n-create-account').classList.remove('hidden');
            const msg = document.getElementById('n8n-create-message');
            msg.innerHTML = '<p class="text-yellow-700 bg-yellow-100 border border-yellow-200 rounded p-2">You have a pending invite. Click "Request n8n Invite" to resend the invitation link.</p>';
          } else if (data.id) {
            // User exists and is active - show account exists section
            document.getElementById('n8n-account-exists').classList.remove('hidden');
            if (data.role) document.getElementById('n8n-role').textContent = data.role;
          } else {
            // Unexpected response
            document.getElementById('n8n-status-loading').innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Unexpected response from n8n.</p>';
          }
        })
        .catch(err => {
          console.error('Error checking n8n status:', err);
          document.getElementById('n8n-status-loading').innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error checking n8n status.</p>';
        });
    }

    function createN8nAccount() {
      // Email is taken from server-side auth; body is not required
      const msg = document.getElementById('n8n-create-message');
      fetch('/dashboard/api/n8n/create-user', { method: 'POST' })
        .then(res => res.json())
        .then(data => {
          // If array [] -> already has account, no invite
          if (data.length == 0) {
            msg.innerHTML = '<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Account already active. No invite needed.</p>';
            return;
          }
          data = data[0]; // Get first item
          if (data && data.user && data.user.inviteAcceptUrl) {
            const link = data.user.inviteAcceptUrl;
            document.getElementById('n8n-invite-link').textContent = link;
            document.getElementById('n8n-invite-link').href = link;
            document.getElementById('n8n-invite').classList.remove('hidden');
            msg.innerHTML = '<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Invite created successfully.</p>';
          } else if (data && data.error) {
            msg.innerHTML = `<p class=\"text-red-700 bg-red-100 border border-red-200 rounded p-2\">${data.error}</p>`;
          } else {
            msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Unexpected response.</p>';
          }
        })
        .catch(err => {
          console.error('Error creating n8n account:', err);
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Failed to create n8n account.</p>';
        });
    }

    function changeN8nPassword() {
      const newPassword = document.getElementById('n8n-new-password').value;
      const confirmPassword = document.getElementById('n8n-confirm-password').value;
      const msg = document.getElementById('n8n-change-password-message');

      // Check if passwords match
      if (newPassword !== confirmPassword) {
        msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Passwords do not match.</p>';
        return;
      }

      // Check password length
      if (newPassword.length < 8) {
        msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Password must be at least 8 characters.</p>';
        return;
      }

      msg.innerHTML = '<p class="text-gray-600">Changing password...</p>';

      fetch('/dashboard/api/n8n/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ newPassword })
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            msg.innerHTML = '<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Password changed successfully!</p>';
            document.getElementById('n8n-change-password-form').reset();
          } else {
            msg.innerHTML = `<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">${data.message || 'Failed to change password'}</p>`;
          }
        })
        .catch(err => {
          console.error('Error changing n8n password:', err);
          msg.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error changing password. Please try again.</p>';
        });
    }

    // Function to create an account
    function createAccount(email, name) {
      const password = document.getElementById('new-password').value;
      const confirmPassword = document.getElementById('confirm-password').value;
      const messageDiv = document.getElementById('create-account-message');

      // Check if passwords match
      if (password !== confirmPassword) {
        messageDiv.innerHTML = '<p class="message error">Passwords do not match.</p>';
        return;
      }

      // This would be an AJAX call to your backend
      fetch('/dashboard/api/webui/create-account', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: email,
          name: name,
          password: password
        })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            messageDiv.innerHTML = '<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Account created successfully!</p>';
            // Refresh account status after a short delay
            setTimeout(() => {
              checkUserExists(email, name);
            }, 2000);
          } else {
            messageDiv.innerHTML = `<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error: ${data.message}</p>`;
          }
        })
        .catch(error => {
          console.error('Error creating account:', error);
          messageDiv.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error creating account. Please try again later.</p>';
        });
    }

    // Function to change password
    function changePassword(email) {
      const newPassword = document.getElementById('new-password-change').value;
      const confirmPassword = document.getElementById('confirm-password-change').value;
      const messageDiv = document.getElementById('change-password-message');

      // Check if passwords match
      if (newPassword !== confirmPassword) {
        messageDiv.innerHTML = '<p class="message error">Passwords do not match.</p>';
        return;
      }

      // This would be an AJAX call to your backend
      fetch('/dashboard/api/webui/change-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: email,
          password: newPassword
        })
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            messageDiv.innerHTML = '<p class="text-green-700 bg-green-100 border border-green-200 rounded p-2">Password updated successfully!</p>';
            // Clear the form
            document.getElementById('change-password-form').reset();
          } else {
            messageDiv.innerHTML = `<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error: ${data.message}</p>`;
          }
        })
        .catch(error => {
          console.error('Error changing password:', error);
          messageDiv.innerHTML = '<p class="text-red-700 bg-red-100 border border-red-200 rounded p-2">Error updating password. Please try again later.</p>';
        });
    }
  </script>
</body>

</html>